{"ast":null,"code":"import 'isomorphic-unfetch';\nconst API_URL = 'https://graphql.datocms.com';\nconst API_TOKEN = process.env.NEXT_EXAMPLE_CMS_DATOCMS_API_TOKEN; // See: https://www.datocms.com/blog/offer-responsive-progressive-lqip-images-in-2020\n\nconst responsiveImageFragment = `\n  fragment responsiveImageFragment on ResponsiveImage {\n  srcSet\n    webpSrcSet\n    sizes\n    src\n    width\n    height\n    aspectRatio\n    alt\n    title\n    bgColor\n    base64\n  }\n`;\n\nasync function fetchAPI(query, {\n  variables,\n  preview\n} = {}) {\n  const res = await fetch(API_URL + (preview ? '/preview' : ''), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getPreviewPostBySlug(slug) {\n  const data = await fetchAPI(`\n    query PostBySlug($slug: String) {\n      post(filter: {slug: {eq: $slug}}) {\n        slug\n      }\n    }`, {\n    preview: true,\n    variables: {\n      slug\n    }\n  });\n  return data === null || data === void 0 ? void 0 : data.post;\n}\nexport async function getAllPostsWithSlug() {\n  const data = fetchAPI(`\n    {\n      allPosts {\n        slug\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : data.allPosts;\n}\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(`\n    {\n      allPosts(orderBy: date_DESC, first: 20) {\n        title\n        slug\n        excerpt\n        date\n        coverImage {\n          responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n            ...responsiveImageFragment\n          }\n        }\n        author {\n          name\n          picture {\n            url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n          }\n        }\n      }\n    }\n\n    ${responsiveImageFragment}\n  `, {\n    preview\n  });\n  return data === null || data === void 0 ? void 0 : data.allPosts;\n}\nexport async function getPostAndMorePosts(slug, preview) {\n  const data = await fetchAPI(`\n  query PostBySlug($slug: String) {\n    post(filter: {slug: {eq: $slug}}) {\n      title\n      slug\n      content\n      date\n      ogImage: coverImage{\n        url(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 })\n      }\n      coverImage {\n        responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n          ...responsiveImageFragment\n        }\n      }\n      author {\n        name\n        picture {\n          url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n        }\n      }\n    }\n\n    morePosts: allPosts(orderBy: date_DESC, first: 2, filter: {slug: {neq: $slug}}) {\n      title\n      slug\n      excerpt\n      date\n      coverImage {\n        responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n          ...responsiveImageFragment\n        }\n      }\n      author {\n        name\n        picture {\n          url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n        }\n      }\n    }\n  }\n\n  ${responsiveImageFragment}\n  `, {\n    preview,\n    variables: {\n      slug\n    }\n  });\n  return data;\n}","map":{"version":3,"sources":["/Users/wduntak/Projects/cms-datocms-app/lib/api.js"],"names":["API_URL","API_TOKEN","process","env","NEXT_EXAMPLE_CMS_DATOCMS_API_TOKEN","responsiveImageFragment","fetchAPI","query","variables","preview","res","fetch","method","headers","Authorization","body","JSON","stringify","json","errors","console","error","Error","data","getPreviewPostBySlug","slug","post","getAllPostsWithSlug","allPosts","getAllPostsForHome","getPostAndMorePosts"],"mappings":"AAAA,OAAO,oBAAP;AAEA,MAAMA,OAAO,GAAG,6BAAhB;AACA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,kCAA9B,C,CAEA;;AACA,MAAMC,uBAAuB,GAAI;;;;;;;;;;;;;;CAAjC;;AAgBA,eAAeC,QAAf,CAAwBC,KAAxB,EAA+B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAyB,EAAxD,EAA4D;AAC1D,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACX,OAAO,IAAIS,OAAO,GAAG,UAAH,GAAgB,EAA3B,CAAR,EAAwC;AAC7DG,IAAAA,MAAM,EAAE,MADqD;AAE7DC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,aAAa,EAAG,UAASb,SAAU;AAF5B,KAFoD;AAM7Dc,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,MAAAA,KADmB;AAEnBC,MAAAA;AAFmB,KAAf;AANuD,GAAxC,CAAvB;AAYA,QAAMU,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAJ,EAAnB;;AACA,MAAIA,IAAI,CAACC,MAAT,EAAiB;AACfC,IAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AACA,UAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,SAAOJ,IAAI,CAACK,IAAZ;AACD;;AAED,OAAO,eAAeC,oBAAf,CAAoCC,IAApC,EAA0C;AAC/C,QAAMF,IAAI,GAAG,MAAMjB,QAAQ,CACxB;;;;;MADwB,EAOzB;AACEG,IAAAA,OAAO,EAAE,IADX;AAEED,IAAAA,SAAS,EAAE;AACTiB,MAAAA;AADS;AAFb,GAPyB,CAA3B;AAcA,SAAOF,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEG,IAAb;AACD;AAED,OAAO,eAAeC,mBAAf,GAAqC;AAC1C,QAAMJ,IAAI,GAAGjB,QAAQ,CAAE;;;;;;GAAF,CAArB;AAOA,SAAOiB,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEK,QAAb;AACD;AAED,OAAO,eAAeC,kBAAf,CAAkCpB,OAAlC,EAA2C;AAChD,QAAMc,IAAI,GAAG,MAAMjB,QAAQ,CACxB;;;;;;;;;;;;;;;;;;;;;MAqBCD,uBAAwB;GAtBD,EAwBzB;AAAEI,IAAAA;AAAF,GAxByB,CAA3B;AA0BA,SAAOc,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEK,QAAb;AACD;AAED,OAAO,eAAeE,mBAAf,CAAmCL,IAAnC,EAAyChB,OAAzC,EAAkD;AACvD,QAAMc,IAAI,GAAG,MAAMjB,QAAQ,CACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0CDD,uBAAwB;GA3CC,EA6CzB;AACEI,IAAAA,OADF;AAEED,IAAAA,SAAS,EAAE;AACTiB,MAAAA;AADS;AAFb,GA7CyB,CAA3B;AAoDA,SAAOF,IAAP;AACD","sourcesContent":["import 'isomorphic-unfetch'\n\nconst API_URL = 'https://graphql.datocms.com'\nconst API_TOKEN = process.env.NEXT_EXAMPLE_CMS_DATOCMS_API_TOKEN\n\n// See: https://www.datocms.com/blog/offer-responsive-progressive-lqip-images-in-2020\nconst responsiveImageFragment = `\n  fragment responsiveImageFragment on ResponsiveImage {\n  srcSet\n    webpSrcSet\n    sizes\n    src\n    width\n    height\n    aspectRatio\n    alt\n    title\n    bgColor\n    base64\n  }\n`\n\nasync function fetchAPI(query, { variables, preview } = {}) {\n  const res = await fetch(API_URL + (preview ? '/preview' : ''), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${API_TOKEN}`,\n    },\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n\n  const json = await res.json()\n  if (json.errors) {\n    console.error(json.errors)\n    throw new Error('Failed to fetch API')\n  }\n  return json.data\n}\n\nexport async function getPreviewPostBySlug(slug) {\n  const data = await fetchAPI(\n    `\n    query PostBySlug($slug: String) {\n      post(filter: {slug: {eq: $slug}}) {\n        slug\n      }\n    }`,\n    {\n      preview: true,\n      variables: {\n        slug,\n      },\n    }\n  )\n  return data?.post\n}\n\nexport async function getAllPostsWithSlug() {\n  const data = fetchAPI(`\n    {\n      allPosts {\n        slug\n      }\n    }\n  `)\n  return data?.allPosts\n}\n\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(\n    `\n    {\n      allPosts(orderBy: date_DESC, first: 20) {\n        title\n        slug\n        excerpt\n        date\n        coverImage {\n          responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n            ...responsiveImageFragment\n          }\n        }\n        author {\n          name\n          picture {\n            url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n          }\n        }\n      }\n    }\n\n    ${responsiveImageFragment}\n  `,\n    { preview }\n  )\n  return data?.allPosts\n}\n\nexport async function getPostAndMorePosts(slug, preview) {\n  const data = await fetchAPI(\n    `\n  query PostBySlug($slug: String) {\n    post(filter: {slug: {eq: $slug}}) {\n      title\n      slug\n      content\n      date\n      ogImage: coverImage{\n        url(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 })\n      }\n      coverImage {\n        responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n          ...responsiveImageFragment\n        }\n      }\n      author {\n        name\n        picture {\n          url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n        }\n      }\n    }\n\n    morePosts: allPosts(orderBy: date_DESC, first: 2, filter: {slug: {neq: $slug}}) {\n      title\n      slug\n      excerpt\n      date\n      coverImage {\n        responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {\n          ...responsiveImageFragment\n        }\n      }\n      author {\n        name\n        picture {\n          url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100, sat: -100})\n        }\n      }\n    }\n  }\n\n  ${responsiveImageFragment}\n  `,\n    {\n      preview,\n      variables: {\n        slug,\n      },\n    }\n  )\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}