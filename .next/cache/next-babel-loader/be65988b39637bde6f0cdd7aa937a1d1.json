{"ast":null,"code":"//\n// these easing functions are based on the code of glsl-easing module.\n// https://github.com/glslify/glsl-easings\n//\nexport var ease = {\n  exponentialIn: function exponentialIn(t) {\n    return t == 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));\n  },\n  exponentialOut: function exponentialOut(t) {\n    return t == 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);\n  },\n  exponentialInOut: function exponentialInOut(t) {\n    return t == 0.0 || t == 1.0 ? t : t < 0.5 ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0) : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;\n  },\n  sineOut: function sineOut(t) {\n    var HALF_PI = 1.5707963267948966;\n    return Math.sin(t * HALF_PI);\n  },\n  circularInOut: function circularInOut(t) {\n    return t < 0.5 ? 0.5 * (1.0 - Math.sqrt(1.0 - 4.0 * t * t)) : 0.5 * (Math.sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n  },\n  cubicIn: function cubicIn(t) {\n    return t * t * t;\n  },\n  cubicOut: function cubicOut(t) {\n    var f = t - 1.0;\n    return f * f * f + 1.0;\n  },\n  cubicInOut: function cubicInOut(t) {\n    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;\n  },\n  quadraticOut: function quadraticOut(t) {\n    return -t * (t - 2.0);\n  },\n  quarticOut: function quarticOut(t) {\n    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\n  }\n};","map":{"version":3,"sources":["/Users/wduntak/Projects/cms-datocms-app/lib/easings.js"],"names":["ease","exponentialIn","t","Math","pow","exponentialOut","exponentialInOut","sineOut","HALF_PI","sin","circularInOut","sqrt","cubicIn","cubicOut","f","cubicInOut","quadraticOut","quarticOut"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAO,IAAMA,IAAI,GAAG;AAClBC,EAAAA,aAAa,EAAE,uBAAAC,CAAC,EAAI;AAClB,WAAOA,CAAC,IAAI,GAAL,GAAWA,CAAX,GAAeC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAc,QAAQF,CAAC,GAAG,GAAZ,CAAd,CAAtB;AACD,GAHiB;AAIlBG,EAAAA,cAAc,EAAE,wBAAAH,CAAC,EAAI;AACnB,WAAOA,CAAC,IAAI,GAAL,GAAWA,CAAX,GAAe,MAAMC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAc,CAAC,IAAD,GAAQF,CAAtB,CAA5B;AACD,GANiB;AAOlBI,EAAAA,gBAAgB,EAAE,0BAAAJ,CAAC,EAAI;AACrB,WAAOA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAAjB,GACHA,CADG,GAEHA,CAAC,GAAG,GAAJ,GACA,CAAC,GAAD,GAAOC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAc,OAAOF,CAAP,GAAW,IAAzB,CADP,GAEA,CAAC,GAAD,GAAOC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAc,OAAOF,CAAC,GAAG,IAAzB,CAAP,GAAwC,GAJ5C;AAKD,GAbiB;AAclBK,EAAAA,OAAO,EAAE,iBAAAL,CAAC,EAAI;AACZ,QAAMM,OAAO,GAAG,kBAAhB;AACA,WAAOL,IAAI,CAACM,GAAL,CAASP,CAAC,GAAGM,OAAb,CAAP;AACD,GAjBiB;AAkBlBE,EAAAA,aAAa,EAAE,uBAAAR,CAAC,EAAI;AAClB,WAAOA,CAAC,GAAG,GAAJ,GACH,OAAO,MAAMC,IAAI,CAACQ,IAAL,CAAU,MAAM,MAAMT,CAAN,GAAUA,CAA1B,CAAb,CADG,GAEH,OAAOC,IAAI,CAACQ,IAAL,CAAU,CAAC,MAAM,MAAMT,CAAb,KAAmB,MAAMA,CAAN,GAAU,GAA7B,CAAV,IAA+C,GAAtD,CAFJ;AAGD,GAtBiB;AAuBlBU,EAAAA,OAAO,EAAE,iBAAAV,CAAC,EAAI;AACZ,WAAOA,CAAC,GAAGA,CAAJ,GAAQA,CAAf;AACD,GAzBiB;AA0BlBW,EAAAA,QAAQ,EAAE,kBAAAX,CAAC,EAAI;AACb,QAAMY,CAAC,GAAGZ,CAAC,GAAG,GAAd;AACA,WAAOY,CAAC,GAAGA,CAAJ,GAAQA,CAAR,GAAY,GAAnB;AACD,GA7BiB;AA8BlBC,EAAAA,UAAU,EAAE,oBAAAb,CAAC,EAAI;AACf,WAAOA,CAAC,GAAG,GAAJ,GAAU,MAAMA,CAAN,GAAUA,CAAV,GAAcA,CAAxB,GAA4B,MAAMC,IAAI,CAACC,GAAL,CAAS,MAAMF,CAAN,GAAU,GAAnB,EAAwB,GAAxB,CAAN,GAAqC,GAAxE;AACD,GAhCiB;AAiClBc,EAAAA,YAAY,EAAE,sBAAAd,CAAC,EAAI;AACjB,WAAO,CAACA,CAAD,IAAMA,CAAC,GAAG,GAAV,CAAP;AACD,GAnCiB;AAoClBe,EAAAA,UAAU,EAAE,oBAAAf,CAAC,EAAI;AACf,WAAOC,IAAI,CAACC,GAAL,CAASF,CAAC,GAAG,GAAb,EAAkB,GAAlB,KAA0B,MAAMA,CAAhC,IAAqC,GAA5C;AACD;AAtCiB,CAAb","sourcesContent":["//\n// these easing functions are based on the code of glsl-easing module.\n// https://github.com/glslify/glsl-easings\n//\n\nexport const ease = {\n  exponentialIn: t => {\n    return t == 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));\n  },\n  exponentialOut: t => {\n    return t == 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);\n  },\n  exponentialInOut: t => {\n    return t == 0.0 || t == 1.0\n      ? t\n      : t < 0.5\n      ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)\n      : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;\n  },\n  sineOut: t => {\n    const HALF_PI = 1.5707963267948966;\n    return Math.sin(t * HALF_PI);\n  },\n  circularInOut: t => {\n    return t < 0.5\n      ? 0.5 * (1.0 - Math.sqrt(1.0 - 4.0 * t * t))\n      : 0.5 * (Math.sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n  },\n  cubicIn: t => {\n    return t * t * t;\n  },\n  cubicOut: t => {\n    const f = t - 1.0;\n    return f * f * f + 1.0;\n  },\n  cubicInOut: t => {\n    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;\n  },\n  quadraticOut: t => {\n    return -t * (t - 2.0);\n  },\n  quarticOut: t => {\n    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}